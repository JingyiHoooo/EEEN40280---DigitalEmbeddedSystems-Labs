C51 COMPILER V9.59.0.0   FREQUENCY                                                         05/30/2019 23:38:32 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE FREQUENCY
OBJECT MODULE PLACED IN .\Objects\frequency.obj
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE Sources\frequency.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\frequency.lst) TABS(2) OBJECT(.\Objects\frequency.obj)

line level    source

   1          #include "frequency.h"
   2          #include <ADUC841.h>
   3          
   4          // output of the interrupt vector
   5            uint32 measured_frequency;
   6            bit measurement_ready;
   7            bit low_freq_measurement;
   8          
   9            // set up the values for low frequency measurements
  10            void set_up_lowfreq() {
  11   1          low_freq_measurement = 1;
  12   1              
  13   1          // set up for 128 total cycles
  14   1          measured_frequency = (TIMER_UPPER_LIMIT - LOWER_EDGE_LIMIT + measured_frequency);
  15   1          TH1 = measured_frequency >> 8;
  16   1          TL1 = measured_frequency;
  17   1          
  18   1          measured_frequency = 1;
  19   1          
  20   1          // let timers run again
  21   1          TCON =
  22   1            (0 << TF1_P) |
  23   1            (1 << TR1_P) |
  24   1            (0 << TF0_P) |
  25   1            (1 << TR0_P);
  26   1        }
  27            
  28            // make the measurement if time limit runs out
  29            void timeout_measurement() {
  30   1          TCON = 0;
  31   1              
  32   1          measured_frequency = LOWER_EDGE_LIMIT - (TIMER_UPPER_LIMIT - ((TH1 << 8) | TL1));
  33   1          measured_frequency >>= 2; // divide by 4 to get the actual frequency
  34   1          
  35   1          measurement_ready = 1;
  36   1        }
  37            
  38            // calculates the frequency given both timer values (f_counter<f_timer)
  39            void calculate_frequency() interrupt 1 { // Timer 0 (0x000B)interrupt occurs when overflow
  40   1          if(!low_freq_measurement) { // if a high frequency measurement
  41   2            TCON = 0;
  42   2            
  43   2            measured_frequency = (TH1 << 8) | TL1;
  44   2            
  45   2            // calculate frequency
  46   2            if(measured_frequency >= LOWER_EDGE_LIMIT) {
  47   3              measured_frequency = (measured_frequency << 16) / CLOCK_FREQ_DIVISOR;
  48   3              measurement_ready = 1;
  49   3            }
  50   2            else // otherwise start low frequency measurement
  51   2              set_up_lowfreq();
  52   2          }
  53   1          else { // if a low frequency measurement
  54   2            measured_frequency++;
C51 COMPILER V9.59.0.0   FREQUENCY                                                         05/30/2019 23:38:32 PAGE 2   

  55   2            
  56   2            if(measured_frequency == TIME_LIMIT_MULT) {
  57   3              timeout_measurement();
  58   3            }
  59   2          }
  60   1        }
  61            
  62            // calculates the frequency in case of a counter overflow (LOWER_EDGE_LIMIT reached)
  63            void overflow_frequency() interrupt 3 { // Timer 1 (0x001B)interrupt occours when overflow
  64   1          TCON = 0;   // Turn off Timer 0&1
  65   1          
  66   1          measured_frequency *= TIMER_UPPER_LIMIT;
  67   1          measured_frequency += (TH0 << 8) | TL0; // Timing value of Timer 0
  68   1          measured_frequency = (CLOCK_FREQUENCY * LOWER_EDGE_LIMIT) / measured_frequency;
  69   1          
  70   1          measurement_ready = 1;
  71   1        }
  72            
  73            // get the frequency of the input signal
  74            uint32 get_frequency() {
  75   1          // set timer modes
  76   1          TMOD =
  77   1            (0 << T1GATE_P) |  // Gate control, enable timer 1 when TR1 bit is set
  78   1            (1 << T1CT_P) |    // select counter operation
  79   1            (1 << T1MODE_P) |  // 16-bit counter
  80   1            (0 << T0GATE_P) |  //
  81   1            (0 << T0CT_P) |    // select Ti r operation
  82   1            (1 << T0MODE_P);   // 16-bit Timer
  83   1          
  84   1          // enable all interrupts (IE SFR Bit)
  85   1          EA = 1;
  86   1          ET0 = 1;
  87   1          ET1 = 1;
  88   1          
  89   1          // reset all timers
  90   1          
  91   1          // High byte of Timer 0&1
  92   1          TH0 = 0;
  93   1          TH1 = 0;
  94   1          // Low byte of Timer 0&1
  95   1          TL0 = 0;
  96   1          TL1 = 0;
  97   1          
  98   1          measurement_ready = 0;
  99   1          low_freq_measurement = 0;
 100   1          
 101   1          // let timers run
 102   1          TCON =
 103   1            (0 << TF1_P) | // Counter 1 overflow flag is 0 in the beginning
 104   1            (1 << TR1_P) | // Time 1 starts counting
 105   1            (0 << TF0_P) | // Timer 0 overflow flag is 0 in the beginning
 106   1            (1 << TR0_P);  // Timer 0 starts Timing
 107   1          
 108   1          while(!measurement_ready);
 109   1          
 110   1          return measured_frequency;
 111   1        }
 112            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    485    ----
C51 COMPILER V9.59.0.0   FREQUENCY                                                         05/30/2019 23:38:32 PAGE 3   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
